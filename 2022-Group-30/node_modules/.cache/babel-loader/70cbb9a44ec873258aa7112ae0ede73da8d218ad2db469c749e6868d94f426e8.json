{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\nconst artistsAdapter = createEntityAdapter({});\nconst initialState = artistsAdapter.getInitialState();\nexport const artistsApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getArtists: builder.query({\n      query: () => '/artists?=application/json',\n      validateStatus: (response, result) => {\n        return response.status === 200 && !result.isError;\n      },\n      //keepUnusedDataFor: 5,\n      transformResponse: responseData => {\n        const loadedArtists = responseData.map(artist => {\n          artist.id = artist._id;\n          return artist;\n        });\n        return artistsAdapter.setAll(initialState, loadedArtists);\n      },\n      providesTags: (result, error, arg) => {\n        if (result !== null && result !== void 0 && result.ids) {\n          return [{\n            type: 'Artist',\n            id: 'LIST'\n          }, ...result.ids.map(id => ({\n            type: 'Artist',\n            id\n          }))];\n        } else return [{\n          type: 'Artist',\n          id: 'LIST'\n        }];\n      }\n    })\n  })\n});\nexport const {\n  useGetArtistsQuery\n} = artistsApiSlice;\n\n// returns the query result object\nexport const selectArtistsResult = artistsApiSlice.endpoints.getArtists.select();\n\n// creates memoized selector\nconst selectArtistsData = createSelector(selectArtistsResult, artistsResult => artistsResult.data // normalized state object with ids & entities\n);\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n  selectAll: selectAllArtists,\n  selectById: selectArtistById,\n  selectIds: selectArtistIds\n  // Pass in a selector that returns the artists slice of state\n} = artistsAdapter.getSelectors(state => {\n  var _selectArtistsData;\n  return (_selectArtistsData = selectArtistsData(state)) !== null && _selectArtistsData !== void 0 ? _selectArtistsData : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","artistsAdapter","initialState","getInitialState","artistsApiSlice","injectEndpoints","endpoints","builder","getArtists","query","validateStatus","response","result","status","isError","transformResponse","responseData","loadedArtists","map","artist","id","_id","setAll","providesTags","error","arg","ids","type","useGetArtistsQuery","selectArtistsResult","select","selectArtistsData","artistsResult","data","selectAll","selectAllArtists","selectById","selectArtistById","selectIds","selectArtistIds","getSelectors","state","_selectArtistsData"],"sources":["/Users/kamile/Documents/WE/WebEng/2022-Group-30/src/features/artists/artistsApiSlice.js"],"sourcesContent":["import {\n    createSelector,\n    createEntityAdapter\n} from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\"\n\nconst artistsAdapter = createEntityAdapter({})\n\nconst initialState = artistsAdapter.getInitialState()\n\nexport const artistsApiSlice = apiSlice.injectEndpoints({\n    endpoints: builder => ({\n        getArtists: builder.query({\n            query: () => '/artists?=application/json',\n            validateStatus: (response, result) => {\n                return response.status === 200 && !result.isError\n            },\n            //keepUnusedDataFor: 5,\n            transformResponse: responseData => {\n                const loadedArtists = responseData.map(artist => {\n                    artist.id = artist._id\n                    return artist\n                });\n                return artistsAdapter.setAll(initialState, loadedArtists)\n            },\n            providesTags: (result, error, arg) => {\n                if (result?.ids) {\n                    return [\n                        { type: 'Artist', id: 'LIST' },\n                        ...result.ids.map(id => ({ type: 'Artist', id }))\n                    ]\n                } else return [{ type: 'Artist', id: 'LIST' }]\n            }\n        }),\n        \n    }),\n})\n\nexport const {\n    useGetArtistsQuery,\n} = artistsApiSlice\n\n// returns the query result object\nexport const selectArtistsResult = artistsApiSlice.endpoints.getArtists.select()\n\n// creates memoized selector\nconst selectArtistsData = createSelector(\n    selectArtistsResult,\n    artistsResult => artistsResult.data // normalized state object with ids & entities\n)\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n    selectAll: selectAllArtists,\n    selectById: selectArtistById,\n    selectIds: selectArtistIds\n    // Pass in a selector that returns the artists slice of state\n} = artistsAdapter.getSelectors(state => selectArtistsData(state) ?? initialState)"],"mappings":"AAAA,SACIA,cAAc,EACdC,mBAAmB,QAChB,kBAAkB;AACzB,SAASC,QAAQ,QAAQ,wBAAwB;AAEjD,MAAMC,cAAc,GAAGF,mBAAmB,CAAC,CAAC,CAAC,CAAC;AAE9C,MAAMG,YAAY,GAAGD,cAAc,CAACE,eAAe,CAAC,CAAC;AAErD,OAAO,MAAMC,eAAe,GAAGJ,QAAQ,CAACK,eAAe,CAAC;EACpDC,SAAS,EAAEC,OAAO,KAAK;IACnBC,UAAU,EAAED,OAAO,CAACE,KAAK,CAAC;MACtBA,KAAK,EAAEA,CAAA,KAAM,4BAA4B;MACzCC,cAAc,EAAEA,CAACC,QAAQ,EAAEC,MAAM,KAAK;QAClC,OAAOD,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACD,MAAM,CAACE,OAAO;MACrD,CAAC;MACD;MACAC,iBAAiB,EAAEC,YAAY,IAAI;QAC/B,MAAMC,aAAa,GAAGD,YAAY,CAACE,GAAG,CAACC,MAAM,IAAI;UAC7CA,MAAM,CAACC,EAAE,GAAGD,MAAM,CAACE,GAAG;UACtB,OAAOF,MAAM;QACjB,CAAC,CAAC;QACF,OAAOlB,cAAc,CAACqB,MAAM,CAACpB,YAAY,EAAEe,aAAa,CAAC;MAC7D,CAAC;MACDM,YAAY,EAAEA,CAACX,MAAM,EAAEY,KAAK,EAAEC,GAAG,KAAK;QAClC,IAAIb,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEc,GAAG,EAAE;UACb,OAAO,CACH;YAAEC,IAAI,EAAE,QAAQ;YAAEP,EAAE,EAAE;UAAO,CAAC,EAC9B,GAAGR,MAAM,CAACc,GAAG,CAACR,GAAG,CAACE,EAAE,KAAK;YAAEO,IAAI,EAAE,QAAQ;YAAEP;UAAG,CAAC,CAAC,CAAC,CACpD;QACL,CAAC,MAAM,OAAO,CAAC;UAAEO,IAAI,EAAE,QAAQ;UAAEP,EAAE,EAAE;QAAO,CAAC,CAAC;MAClD;IACJ,CAAC;EAEL,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAM;EACTQ;AACJ,CAAC,GAAGxB,eAAe;;AAEnB;AACA,OAAO,MAAMyB,mBAAmB,GAAGzB,eAAe,CAACE,SAAS,CAACE,UAAU,CAACsB,MAAM,CAAC,CAAC;;AAEhF;AACA,MAAMC,iBAAiB,GAAGjC,cAAc,CACpC+B,mBAAmB,EACnBG,aAAa,IAAIA,aAAa,CAACC,IAAI,CAAC;AACxC,CAAC;;AAED;AACA,OAAO,MAAM;EACTC,SAAS,EAAEC,gBAAgB;EAC3BC,UAAU,EAAEC,gBAAgB;EAC5BC,SAAS,EAAEC;EACX;AACJ,CAAC,GAAGtC,cAAc,CAACuC,YAAY,CAACC,KAAK;EAAA,IAAAC,kBAAA;EAAA,QAAAA,kBAAA,GAAIX,iBAAiB,CAACU,KAAK,CAAC,cAAAC,kBAAA,cAAAA,kBAAA,GAAIxC,YAAY;AAAA,EAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}