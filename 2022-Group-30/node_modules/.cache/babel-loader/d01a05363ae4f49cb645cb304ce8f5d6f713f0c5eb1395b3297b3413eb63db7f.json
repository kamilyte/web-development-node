{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\nconst songsAdapter = createEntityAdapter({});\nconst initialState = songsAdapter.getInitialState();\nexport const songsApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getSongs: builder.query({\n      query: () => '/songs/all?=application/json',\n      validateStatus: (response, result) => {\n        return response.status === 200 && !result.isError;\n      },\n      //keepUnusedDataFor: 5,\n      transformResponse: responseData => {\n        const loadedSongs = responseData.map(song => {\n          song.id = song._id;\n          return song;\n        });\n        return songsAdapter.setAll(initialState, loadedSongs);\n      },\n      providesTags: (result, error, arg) => {\n        if (result !== null && result !== void 0 && result.ids) {\n          return [{\n            type: 'Song',\n            id: 'LIST'\n          }, ...result.ids.map(id => ({\n            type: 'Song',\n            id\n          }))];\n        } else return [{\n          type: 'Song',\n          id: 'LIST'\n        }];\n      }\n    }),\n    getSongID: builder.query({\n      query: id => ({\n        url: `/songs/id?=application/json`,\n        body: {\n          id\n        }\n      }),\n      transformResponse: (response, meta, arg) => response.data,\n      transformErrorResponse: (response, meta, arg) => response.status,\n      providesTags: (result, error, id) => [{\n        type: 'Song',\n        id\n      }]\n\n      /*\n      providesTags: (result, error, arg) => [\n          { type: 'Song', id: arg.id }\n      ]\n      */\n    }),\n\n    addNewSong: builder.mutation({\n      query: initialSongData => ({\n        url: '/songs',\n        method: 'POST',\n        body: {\n          ...initialSongData\n        }\n      }),\n      invalidatesTags: [{\n        type: 'Song',\n        id: \"LIST\"\n      }]\n    }),\n    updateSong: builder.mutation({\n      query: initialSongData => ({\n        url: '/songs/id',\n        method: 'PATCH',\n        body: {\n          ...initialSongData\n        }\n      }),\n      invalidatesTags: (result, error, arg) => [{\n        type: 'Song',\n        id: arg.id\n      }]\n    }),\n    deleteSongID: builder.mutation({\n      query: _ref => {\n        let {\n          id\n        } = _ref;\n        return {\n          url: `/songs/id`,\n          method: 'DELETE',\n          body: {\n            id\n          }\n        };\n      },\n      invalidatesTags: (result, error, arg) => [{\n        type: 'Song',\n        id: arg.id\n      }]\n    }),\n    deleteSongsArtistID: builder.mutation({\n      query: _ref2 => {\n        let {\n          id\n        } = _ref2;\n        return {\n          url: `/songs/artist/id`,\n          method: 'DELETE',\n          body: {\n            id\n          }\n        };\n      },\n      invalidatesTags: (result, error, arg) => [{\n        type: 'Song',\n        id: arg.id\n      }]\n    }),\n    deleteSongsArtistName: builder.mutation({\n      query: _ref3 => {\n        let {\n          artists\n        } = _ref3;\n        return {\n          url: `/songs/artist`,\n          method: 'DELETE',\n          body: {\n            artists\n          }\n        };\n      },\n      invalidatesTags: (result, error, arg) => [{\n        type: 'Song',\n        id: arg.artists\n      }]\n    })\n  })\n});\nexport const {\n  useGetSongsQuery,\n  useGetSongIDQuery,\n  useAddNewSongMutation,\n  useUpdateSongMutation,\n  useDeleteSongIDMutation,\n  useDeleteSongsArtistIDMutation,\n  useDeleteSongsArtistNameMutation\n} = songsApiSlice;\n\n// returns the query result object\nexport const selectSongsResult = songsApiSlice.endpoints.getSongs.select();\n\n// creates memoized selector\nconst selectSongsData = createSelector(selectSongsResult, songsResult => songsResult.data // normalized state object with ids & entities\n);\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n  selectAll: selectAllSongs,\n  selectById: selectSongById,\n  selectIds: selectSongIds\n  // Pass in a selector that returns the songs slice of state\n} = songsAdapter.getSelectors(state => {\n  var _selectSongsData;\n  return (_selectSongsData = selectSongsData(state)) !== null && _selectSongsData !== void 0 ? _selectSongsData : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","songsAdapter","initialState","getInitialState","songsApiSlice","injectEndpoints","endpoints","builder","getSongs","query","validateStatus","response","result","status","isError","transformResponse","responseData","loadedSongs","map","song","id","_id","setAll","providesTags","error","arg","ids","type","getSongID","url","body","meta","data","transformErrorResponse","addNewSong","mutation","initialSongData","method","invalidatesTags","updateSong","deleteSongID","_ref","deleteSongsArtistID","_ref2","deleteSongsArtistName","_ref3","artists","useGetSongsQuery","useGetSongIDQuery","useAddNewSongMutation","useUpdateSongMutation","useDeleteSongIDMutation","useDeleteSongsArtistIDMutation","useDeleteSongsArtistNameMutation","selectSongsResult","select","selectSongsData","songsResult","selectAll","selectAllSongs","selectById","selectSongById","selectIds","selectSongIds","getSelectors","state","_selectSongsData"],"sources":["/Users/kamile/Documents/WE/WebEng/2022-Group-30/src/features/songs/songsApiSlice.js"],"sourcesContent":["import {\n    createSelector,\n    createEntityAdapter\n} from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\"\n\nconst songsAdapter = createEntityAdapter({})\n\nconst initialState = songsAdapter.getInitialState()\n\nexport const songsApiSlice = apiSlice.injectEndpoints({\n    endpoints: builder => ({\n        getSongs: builder.query({\n            query: () => '/songs/all?=application/json',\n            validateStatus: (response, result) => {\n                return response.status === 200 && !result.isError\n            },\n            //keepUnusedDataFor: 5,\n            transformResponse: responseData => {\n                const loadedSongs = responseData.map(song => {\n                    song.id = song._id\n                    return song\n                });\n                return songsAdapter.setAll(initialState, loadedSongs)\n            },\n            providesTags: (result, error, arg) => {\n                if (result?.ids) {\n                    return [\n                        { type: 'Song', id: 'LIST' },\n                        ...result.ids.map(id => ({ type: 'Song', id }))\n                    ]\n                } else return [{ type: 'Song', id: 'LIST' }]\n            }\n        }),\n        getSongID: builder.query({\n            query: (id) => ({\n                url: `/songs/id?=application/json`,\n                body: { id }\n            }),\n            \n            transformResponse: (response, meta, arg) => response.data,\n      \n            transformErrorResponse: (response, meta, arg) => response.status,\n            providesTags: (result, error, id) => [{ type: 'Song', id }],\n            \n            /*\n            providesTags: (result, error, arg) => [\n                { type: 'Song', id: arg.id }\n            ]\n            */\n        }),\n        addNewSong: builder.mutation({\n            query: initialSongData => ({\n                url: '/songs',\n                method: 'POST',\n                body: {\n                    ...initialSongData,\n                }\n            }),\n            invalidatesTags: [\n                { type: 'Song', id: \"LIST\" }\n            ]\n        }),\n        updateSong: builder.mutation({\n            query: initialSongData => ({\n                url: '/songs/id',\n                method: 'PATCH',\n                body: {\n                    ...initialSongData,\n                }\n            }),\n            invalidatesTags: (result, error, arg) => [\n                { type: 'Song', id: arg.id }\n            ]\n        }),\n        deleteSongID: builder.mutation({\n            query: ({ id }) => ({\n                url: `/songs/id`,\n                method: 'DELETE',\n                body: { id }\n            }),\n            invalidatesTags: (result, error, arg) => [\n                { type: 'Song', id: arg.id }\n            ]\n        }),\n        deleteSongsArtistID: builder.mutation({\n            query: ({ id }) => ({\n                url: `/songs/artist/id`,\n                method: 'DELETE',\n                body: { id }\n            }),\n            invalidatesTags: (result, error, arg) => [\n                { type: 'Song', id: arg.id }\n            ]\n        }),\n        deleteSongsArtistName: builder.mutation({\n            query: ({ artists }) => ({\n                url: `/songs/artist`,\n                method: 'DELETE',\n                body: { artists }\n            }),\n            invalidatesTags: (result, error, arg) => [\n                { type: 'Song', id: arg.artists }\n            ]\n        }),\n    }),\n})\n\nexport const {\n    useGetSongsQuery,\n    useGetSongIDQuery,\n    useAddNewSongMutation,\n    useUpdateSongMutation,\n    useDeleteSongIDMutation,\n    useDeleteSongsArtistIDMutation,\n    useDeleteSongsArtistNameMutation,\n} = songsApiSlice\n\n// returns the query result object\nexport const selectSongsResult = songsApiSlice.endpoints.getSongs.select()\n\n// creates memoized selector\nconst selectSongsData = createSelector(\n    selectSongsResult,\n    songsResult => songsResult.data // normalized state object with ids & entities\n)\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n    selectAll: selectAllSongs,\n    selectById: selectSongById,\n    selectIds: selectSongIds\n    // Pass in a selector that returns the songs slice of state\n} = songsAdapter.getSelectors(state => selectSongsData(state) ?? initialState)"],"mappings":"AAAA,SACIA,cAAc,EACdC,mBAAmB,QAChB,kBAAkB;AACzB,SAASC,QAAQ,QAAQ,wBAAwB;AAEjD,MAAMC,YAAY,GAAGF,mBAAmB,CAAC,CAAC,CAAC,CAAC;AAE5C,MAAMG,YAAY,GAAGD,YAAY,CAACE,eAAe,CAAC,CAAC;AAEnD,OAAO,MAAMC,aAAa,GAAGJ,QAAQ,CAACK,eAAe,CAAC;EAClDC,SAAS,EAAEC,OAAO,KAAK;IACnBC,QAAQ,EAAED,OAAO,CAACE,KAAK,CAAC;MACpBA,KAAK,EAAEA,CAAA,KAAM,8BAA8B;MAC3CC,cAAc,EAAEA,CAACC,QAAQ,EAAEC,MAAM,KAAK;QAClC,OAAOD,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACD,MAAM,CAACE,OAAO;MACrD,CAAC;MACD;MACAC,iBAAiB,EAAEC,YAAY,IAAI;QAC/B,MAAMC,WAAW,GAAGD,YAAY,CAACE,GAAG,CAACC,IAAI,IAAI;UACzCA,IAAI,CAACC,EAAE,GAAGD,IAAI,CAACE,GAAG;UAClB,OAAOF,IAAI;QACf,CAAC,CAAC;QACF,OAAOlB,YAAY,CAACqB,MAAM,CAACpB,YAAY,EAAEe,WAAW,CAAC;MACzD,CAAC;MACDM,YAAY,EAAEA,CAACX,MAAM,EAAEY,KAAK,EAAEC,GAAG,KAAK;QAClC,IAAIb,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEc,GAAG,EAAE;UACb,OAAO,CACH;YAAEC,IAAI,EAAE,MAAM;YAAEP,EAAE,EAAE;UAAO,CAAC,EAC5B,GAAGR,MAAM,CAACc,GAAG,CAACR,GAAG,CAACE,EAAE,KAAK;YAAEO,IAAI,EAAE,MAAM;YAAEP;UAAG,CAAC,CAAC,CAAC,CAClD;QACL,CAAC,MAAM,OAAO,CAAC;UAAEO,IAAI,EAAE,MAAM;UAAEP,EAAE,EAAE;QAAO,CAAC,CAAC;MAChD;IACJ,CAAC,CAAC;IACFQ,SAAS,EAAErB,OAAO,CAACE,KAAK,CAAC;MACrBA,KAAK,EAAGW,EAAE,KAAM;QACZS,GAAG,EAAG,6BAA4B;QAClCC,IAAI,EAAE;UAAEV;QAAG;MACf,CAAC,CAAC;MAEFL,iBAAiB,EAAEA,CAACJ,QAAQ,EAAEoB,IAAI,EAAEN,GAAG,KAAKd,QAAQ,CAACqB,IAAI;MAEzDC,sBAAsB,EAAEA,CAACtB,QAAQ,EAAEoB,IAAI,EAAEN,GAAG,KAAKd,QAAQ,CAACE,MAAM;MAChEU,YAAY,EAAEA,CAACX,MAAM,EAAEY,KAAK,EAAEJ,EAAE,KAAK,CAAC;QAAEO,IAAI,EAAE,MAAM;QAAEP;MAAG,CAAC;;MAE1D;AACZ;AACA;AACA;AACA;IACQ,CAAC,CAAC;;IACFc,UAAU,EAAE3B,OAAO,CAAC4B,QAAQ,CAAC;MACzB1B,KAAK,EAAE2B,eAAe,KAAK;QACvBP,GAAG,EAAE,QAAQ;QACbQ,MAAM,EAAE,MAAM;QACdP,IAAI,EAAE;UACF,GAAGM;QACP;MACJ,CAAC,CAAC;MACFE,eAAe,EAAE,CACb;QAAEX,IAAI,EAAE,MAAM;QAAEP,EAAE,EAAE;MAAO,CAAC;IAEpC,CAAC,CAAC;IACFmB,UAAU,EAAEhC,OAAO,CAAC4B,QAAQ,CAAC;MACzB1B,KAAK,EAAE2B,eAAe,KAAK;QACvBP,GAAG,EAAE,WAAW;QAChBQ,MAAM,EAAE,OAAO;QACfP,IAAI,EAAE;UACF,GAAGM;QACP;MACJ,CAAC,CAAC;MACFE,eAAe,EAAEA,CAAC1B,MAAM,EAAEY,KAAK,EAAEC,GAAG,KAAK,CACrC;QAAEE,IAAI,EAAE,MAAM;QAAEP,EAAE,EAAEK,GAAG,CAACL;MAAG,CAAC;IAEpC,CAAC,CAAC;IACFoB,YAAY,EAAEjC,OAAO,CAAC4B,QAAQ,CAAC;MAC3B1B,KAAK,EAAEgC,IAAA;QAAA,IAAC;UAAErB;QAAG,CAAC,GAAAqB,IAAA;QAAA,OAAM;UAChBZ,GAAG,EAAG,WAAU;UAChBQ,MAAM,EAAE,QAAQ;UAChBP,IAAI,EAAE;YAAEV;UAAG;QACf,CAAC;MAAA,CAAC;MACFkB,eAAe,EAAEA,CAAC1B,MAAM,EAAEY,KAAK,EAAEC,GAAG,KAAK,CACrC;QAAEE,IAAI,EAAE,MAAM;QAAEP,EAAE,EAAEK,GAAG,CAACL;MAAG,CAAC;IAEpC,CAAC,CAAC;IACFsB,mBAAmB,EAAEnC,OAAO,CAAC4B,QAAQ,CAAC;MAClC1B,KAAK,EAAEkC,KAAA;QAAA,IAAC;UAAEvB;QAAG,CAAC,GAAAuB,KAAA;QAAA,OAAM;UAChBd,GAAG,EAAG,kBAAiB;UACvBQ,MAAM,EAAE,QAAQ;UAChBP,IAAI,EAAE;YAAEV;UAAG;QACf,CAAC;MAAA,CAAC;MACFkB,eAAe,EAAEA,CAAC1B,MAAM,EAAEY,KAAK,EAAEC,GAAG,KAAK,CACrC;QAAEE,IAAI,EAAE,MAAM;QAAEP,EAAE,EAAEK,GAAG,CAACL;MAAG,CAAC;IAEpC,CAAC,CAAC;IACFwB,qBAAqB,EAAErC,OAAO,CAAC4B,QAAQ,CAAC;MACpC1B,KAAK,EAAEoC,KAAA;QAAA,IAAC;UAAEC;QAAQ,CAAC,GAAAD,KAAA;QAAA,OAAM;UACrBhB,GAAG,EAAG,eAAc;UACpBQ,MAAM,EAAE,QAAQ;UAChBP,IAAI,EAAE;YAAEgB;UAAQ;QACpB,CAAC;MAAA,CAAC;MACFR,eAAe,EAAEA,CAAC1B,MAAM,EAAEY,KAAK,EAAEC,GAAG,KAAK,CACrC;QAAEE,IAAI,EAAE,MAAM;QAAEP,EAAE,EAAEK,GAAG,CAACqB;MAAQ,CAAC;IAEzC,CAAC;EACL,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAM;EACTC,gBAAgB;EAChBC,iBAAiB;EACjBC,qBAAqB;EACrBC,qBAAqB;EACrBC,uBAAuB;EACvBC,8BAA8B;EAC9BC;AACJ,CAAC,GAAGjD,aAAa;;AAEjB;AACA,OAAO,MAAMkD,iBAAiB,GAAGlD,aAAa,CAACE,SAAS,CAACE,QAAQ,CAAC+C,MAAM,CAAC,CAAC;;AAE1E;AACA,MAAMC,eAAe,GAAG1D,cAAc,CAClCwD,iBAAiB,EACjBG,WAAW,IAAIA,WAAW,CAACzB,IAAI,CAAC;AACpC,CAAC;;AAED;AACA,OAAO,MAAM;EACT0B,SAAS,EAAEC,cAAc;EACzBC,UAAU,EAAEC,cAAc;EAC1BC,SAAS,EAAEC;EACX;AACJ,CAAC,GAAG9D,YAAY,CAAC+D,YAAY,CAACC,KAAK;EAAA,IAAAC,gBAAA;EAAA,QAAAA,gBAAA,GAAIV,eAAe,CAACS,KAAK,CAAC,cAAAC,gBAAA,cAAAA,gBAAA,GAAIhE,YAAY;AAAA,EAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}